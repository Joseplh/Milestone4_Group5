(*#line 31.10 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult = SHELL of string * string * {line: word, column: word};
val error          = fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof            = fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
	fun split(x, []   )   = raise General.Fail("an_error")
          | split(x, y::ys)   = if x=y then ys else split(x,ys);
													
	fun splitFirst(symbol,[])     = [] (* symbol was not in the input list *)
          | splitFirst(symbol,x::xs)  = if x = symbol 
					then (* found split point *)
                                            []
					else (* keep looking      *)
                                            x::splitFirst(symbol,xs);
																		
        val s0    = explode(yytext);
        val s1    = split(#"<",s0);
        val s2    = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\081\082\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\081\079\003\003\003\003\077\003\076\075\074\072\003\070\003\068\
\\067\065\065\065\065\065\065\065\065\065\003\064\059\057\056\003\
\\003\008\052\008\049\008\008\008\008\046\008\008\008\043\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\040\003\003\039\003\
\\003\008\008\008\008\035\029\008\008\027\008\008\008\008\008\008\
\\022\008\008\008\015\008\008\010\008\008\008\007\005\004\003\003\
\\003"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\011\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\012\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\013\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\014\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\019\009\009\009\009\009\009\009\
\\009\009\016\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\017\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\018\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\020\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\021\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\023\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\024\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\025\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\026\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\028\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\032\009\009\009\009\009\009\009\009\009\009\009\009\009\030\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\031\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\033\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\034\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\036\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\037\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\038\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\044\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\045\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\047\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\048\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\050\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\051\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\053\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\054\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\055\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\060\060\060\060\060\060\060\060\060\060\000\000\000\000\061\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\060\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\063\063\063\063\063\063\063\063\063\063\063\063\063\063\063\
\\063\063\063\063\063\063\063\063\063\063\063\000\000\000\000\063\
\\000\063\063\063\063\063\063\063\063\063\063\063\063\063\063\063\
\\063\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\069\069\069\069\069\069\069\069\069\069\000\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\069\
\\069"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\082\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 129)], trans = 0},
{fin = [(N 10),(N 129)], trans = 0},
{fin = [(N 16),(N 129)], trans = 5},
{fin = [(N 57)], trans = 0},
{fin = [(N 8),(N 129)], trans = 0},
{fin = [(N 105),(N 129)], trans = 8},
{fin = [(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 10},
{fin = [(N 105)], trans = 11},
{fin = [(N 105)], trans = 12},
{fin = [(N 105)], trans = 13},
{fin = [(N 88),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 15},
{fin = [(N 105)], trans = 16},
{fin = [(N 105)], trans = 17},
{fin = [(N 105),(N 115)], trans = 8},
{fin = [(N 105)], trans = 19},
{fin = [(N 105)], trans = 20},
{fin = [(N 77),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 22},
{fin = [(N 105)], trans = 23},
{fin = [(N 105)], trans = 24},
{fin = [(N 105)], trans = 25},
{fin = [(N 98),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 27},
{fin = [(N 72),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 29},
{fin = [(N 105)], trans = 30},
{fin = [(N 92),(N 105)], trans = 8},
{fin = [(N 105)], trans = 32},
{fin = [(N 105)], trans = 33},
{fin = [(N 105)], trans = 17},
{fin = [(N 105),(N 129)], trans = 35},
{fin = [(N 105)], trans = 36},
{fin = [(N 105)], trans = 37},
{fin = [(N 82),(N 105)], trans = 8},
{fin = [(N 45),(N 129)], trans = 0},
{fin = [(N 129)], trans = 40},
{fin = [], trans = 41},
{fin = [(N 127)], trans = 0},
{fin = [(N 105),(N 129)], trans = 43},
{fin = [(N 105)], trans = 44},
{fin = [(N 43),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 46},
{fin = [(N 105)], trans = 47},
{fin = [(N 24),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 49},
{fin = [(N 105)], trans = 50},
{fin = [(N 39),(N 105)], trans = 8},
{fin = [(N 105),(N 129)], trans = 52},
{fin = [(N 105)], trans = 53},
{fin = [(N 105)], trans = 54},
{fin = [(N 29),(N 105)], trans = 8},
{fin = [(N 63),(N 129)], trans = 0},
{fin = [(N 20),(N 129)], trans = 57},
{fin = [(N 66)], trans = 0},
{fin = [(N 61),(N 129)], trans = 59},
{fin = [], trans = 60},
{fin = [], trans = 61},
{fin = [], trans = 62},
{fin = [(N 123)], trans = 62},
{fin = [(N 18),(N 129)], trans = 0},
{fin = [(N 102),(N 129)], trans = 65},
{fin = [(N 102)], trans = 65},
{fin = [(N 102),(N 129)], trans = 0},
{fin = [(N 129)], trans = 68},
{fin = [(N 6)], trans = 69},
{fin = [(N 33),(N 129)], trans = 70},
{fin = [(N 51)], trans = 0},
{fin = [(N 31),(N 129)], trans = 72},
{fin = [(N 48)], trans = 0},
{fin = [(N 35),(N 129)], trans = 0},
{fin = [(N 14),(N 129)], trans = 0},
{fin = [(N 12),(N 129)], trans = 0},
{fin = [(N 129)], trans = 77},
{fin = [(N 54)], trans = 0},
{fin = [(N 59),(N 129)], trans = 79},
{fin = [(N 69)], trans = 0},
{fin = [(N 2),(N 129)], trans = 81},
{fin = [(N 2)], trans = 81}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => let val yytext=yymktext() in (*#line 54.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 718.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 102 => let val yytext=yymktext() in (*#line 84.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( "integerNum"    , yytext, getNextTokenPos(yytext))(*#line 720.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 105 => let val yytext=yymktext() in (*#line 85.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( "ident"      , yytext, getNextTokenPos(yytext))(*#line 722.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 115 => let val yytext=yymktext() in (*#line 86.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( "boolVal"      , yytext, getNextTokenPos(yytext))(*#line 724.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 55.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 726.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 123 => let val yytext=yymktext() in (*#line 88.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( generateSchemaTokenName( yytext ), yytext, getNextTokenPos( yytext ))(*#line 728.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 89.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( "" , yytext, getNextTokenPos( yytext))(*#line 730.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 129 => let val yytext=yymktext() in (*#line 91.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) error( "ignored an unprintable character: " ^ yytext ); getNextTokenPos( yytext ); lex()(*#line 732.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 56.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 734.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 16 => let val yytext=yymktext() in (*#line 57.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 736.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 18 => let val yytext=yymktext() in (*#line 58.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 738.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 50.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) getNextTokenPos( yytext ); lex()(*#line 740.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 59.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 742.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 60.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 744.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 29 => let val yytext=yymktext() in (*#line 61.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 746.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 31 => let val yytext=yymktext() in (*#line 62.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 748.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 33 => let val yytext=yymktext() in (*#line 63.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 750.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 35 => let val yytext=yymktext() in (*#line 64.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 752.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 39 => let val yytext=yymktext() in (*#line 65.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 754.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 66.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 756.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 45 => let val yytext=yymktext() in (*#line 67.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 758.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 68.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 760.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 51 => let val yytext=yymktext() in (*#line 69.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 762.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 70.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 764.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 71.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 766.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 59 => let val yytext=yymktext() in (*#line 72.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 768.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 51.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) getNextTokenPos( yytext ); lex()(*#line 770.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 73.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 772.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 74.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 774.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 66 => let val yytext=yymktext() in (*#line 75.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 776.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 69 => let val yytext=yymktext() in (*#line 76.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 778.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 72 => let val yytext=yymktext() in (*#line 77.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 780.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 78.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 782.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 53.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 784.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 82 => let val yytext=yymktext() in (*#line 79.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 786.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 88 => let val yytext=yymktext() in (*#line 80.22 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 788.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 92 => let val yytext=yymktext() in (*#line 81.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 790.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 82.21 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 792.1 "F:\Fall2019\PrincProgLang\M3\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
